<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>临渊羡鱼，不如退而结网</title>
  
  <subtitle>我的梦想，值得我本人去捍卫；我的今日，绝不是昨日的简单重复</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://snaill123.com/"/>
  <updated>2018-03-11T09:26:32.149Z</updated>
  <id>http://snaill123.com/</id>
  
  <author>
    <name>snaill123</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2018-03-11</title>
    <link href="http://snaill123.com/2018/03/11/2018-03-11/"/>
    <id>http://snaill123.com/2018/03/11/2018-03-11/</id>
    <published>2018-03-11T09:12:53.000Z</published>
    <updated>2018-03-11T09:26:32.149Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>记录日常学习请况，增强时间意识</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;记录日常学习请况，增强时间意识&lt;/p&gt;
&lt;/blockquote&gt;

      
    
    </summary>
    
      <category term="日志" scheme="http://snaill123.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="日常记录" scheme="http://snaill123.com/tags/%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>存在钥匙与门的一道迷宫问题</title>
    <link href="http://snaill123.com/2018/02/12/%E5%AD%98%E5%9C%A8%E9%92%A5%E5%8C%99%E4%B8%8E%E9%97%A8%E7%9A%84%E4%B8%80%E9%81%93%E8%BF%B7%E5%AE%AB%E9%97%AE%E9%A2%98/"/>
    <id>http://snaill123.com/2018/02/12/存在钥匙与门的一道迷宫问题/</id>
    <published>2018-02-12T02:29:26.000Z</published>
    <updated>2018-03-01T15:13:57.345Z</updated>
    
    <content type="html"><![CDATA[<p> <a href="http://blog.csdn.net/albertluf/article/details/79301795" target="_blank" rel="noopener">博文连接</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; &lt;a href=&quot;http://blog.csdn.net/albertluf/article/details/79301795&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;博文连接&lt;/a&gt; &lt;/p&gt;

      
    
    </summary>
    
      <category term="刷题" scheme="http://snaill123.com/categories/%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>状态压缩入门题 poj3254 poj1185</title>
    <link href="http://snaill123.com/2018/02/05/%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9%E5%85%A5%E9%97%A8%E9%A2%98-poj3254-poj1185/"/>
    <id>http://snaill123.com/2018/02/05/状态压缩入门题-poj3254-poj1185/</id>
    <published>2018-02-05T15:10:03.000Z</published>
    <updated>2018-03-11T08:03:32.158Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://poj.org/problem?id=3254" target="_blank" rel="noopener">poj 3254 </a></p><blockquote><p>题意如下：农夫有一块地，被划分为m行n列大小相等的格子，其中一些格子是可以放牧的（用1标记），农夫可以在这些格子里放牛，其他格子则不能放牛（用0标记），并且要求不可以使相邻格子都有牛。现在输入数据给出这块地的大小及可否放牧的情况，求该农夫有多少种放牧方案可以选择（注意：任何格子都不放也是一种选择，不要忘记考虑！</p></blockquote><p><strong>这道题算是状态压缩的模板题，<a href="http://blog.csdn.net/harrypoirot/article/details/23163485" target="_blank" rel="noopener">博客推荐</a></strong><br><em>code</em><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 100000000</span></span><br><span class="line"><span class="keyword">int</span> M,N,top = <span class="number">0</span>;<span class="comment">//top表示每行最多的状态数</span></span><br><span class="line"><span class="keyword">int</span> state[<span class="number">600</span>];<span class="comment">//state存放每行所有的可行状态（即没有相邻的状态 </span></span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">20</span>][<span class="number">600</span>];<span class="comment">//dp[i][j]表示第i行状态为j时，可能的状态数</span></span><br><span class="line"><span class="keyword">int</span> cur[<span class="number">20</span>];<span class="comment">//cur保存每一行地形的十进制数</span></span><br><span class="line"><span class="comment">//判断一行是否出现相邻情况</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">ok</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&amp;x&lt;&lt;<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//记录每一行符合要求的所有可能状态</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    top = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> total = <span class="number">1</span> &lt;&lt; N;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; total; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ok(i)) state[++top] = i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断状态x是否符合地形要求</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">fit</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&amp;cur[k]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;M,&amp;N) != EOF)&#123;</span><br><span class="line">        init();</span><br><span class="line">        <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= M; i++)&#123;</span><br><span class="line">            cur[i] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> num;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= N; j++)&#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;num);</span><br><span class="line">                <span class="keyword">if</span>(num == <span class="number">0</span>)&#123;</span><br><span class="line">                    cur[i] += (<span class="number">1</span> &lt;&lt;(N-j));<span class="comment">///若该格为0，则将该位置为1（注意要以相反方式存储，即1表示不可放牧</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//初始化第一行，符合地形的所有状态</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= top; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(fit(state[i],<span class="number">1</span>))&#123;</span><br><span class="line">                    dp[<span class="number">1</span>][i] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//状态转移</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= M; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= top; k++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!fit(state[k],i)) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= top; j++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(!fit(state[j],i<span class="number">-1</span>)) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">if</span>(state[k] &amp; state[j]) <span class="keyword">continue</span>;</span><br><span class="line">                    dp[i][k] = (dp[i][k] + dp[i<span class="number">-1</span>][j]) % mod;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= top; i++)&#123;</span><br><span class="line">            ans = (ans+dp[M][i])%mod;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p><strong>进阶：<a href="http://poj.org/problem?id=1185" target="_blank" rel="noopener">炮兵阵地</a></strong></p><blockquote><p>题意：中文不解释<br>这题也有一篇很好的<a href="https://www.cnblogs.com/scau20110726/archive/2013/02/27/2935256.html" target="_blank" rel="noopener">博客</a>，弄清楚上一题这题上手会很快啦</p></blockquote><p><em>code</em><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> M,N,top = <span class="number">0</span>;<span class="comment">//top表示每行最多的状态数</span></span><br><span class="line"><span class="keyword">int</span> state[<span class="number">600</span>];<span class="comment">//state存放每行所有的可行状态（即没有相邻的状态 </span></span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">200</span>][<span class="number">600</span>][<span class="number">600</span>];<span class="comment">//dp[i][j][k]表示第i行状态为j,i-1行状态为k时的最优解</span></span><br><span class="line"><span class="keyword">int</span> cur[<span class="number">200</span>];<span class="comment">//cur保存每一行地形的十进制数</span></span><br><span class="line"><span class="keyword">int</span> soldier[<span class="number">200</span>];<span class="comment">//存放在state[i]的状态下能放多少个炮兵</span></span><br><span class="line"><span class="keyword">char</span> org[<span class="number">200</span>][<span class="number">20</span>];<span class="comment">//存放输入的原始字符数组</span></span><br><span class="line"><span class="comment">//判断一行是否出现打到对方情况</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">ok</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>((x&amp;x&lt;&lt;<span class="number">1</span>) || (x&amp;x&lt;&lt;<span class="number">2</span>) ) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//记录每一行符合要求的所有可能状态,并记录各状态下炮兵数目</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    top = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> total = <span class="number">1</span> &lt;&lt; N;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; total; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ok(i)) &#123;</span><br><span class="line">            top++;</span><br><span class="line">            state[top] = i;</span><br><span class="line">            <span class="comment">//记录下此时炮兵数</span></span><br><span class="line">            <span class="keyword">int</span> k = i;</span><br><span class="line">            <span class="keyword">while</span>(k)&#123;</span><br><span class="line">                soldier[top] += k&amp;<span class="number">1</span>;</span><br><span class="line">                k = k &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断状态x是否符合地形要求</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">fit</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &amp; cur[k]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断与本行上下相邻的两行是否不会互相攻击</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">well</span><span class="params">(<span class="keyword">int</span> x1, <span class="keyword">int</span> x2, <span class="keyword">int</span> x3)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x1&amp;x2 || x1&amp;x3 || x2&amp;x3) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;M,&amp;N) != EOF)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">        <span class="built_in">memset</span>(soldier,<span class="number">0</span>,<span class="keyword">sizeof</span>(soldier));</span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= M; i++)&#123;</span><br><span class="line">            cur[i] = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>,org[i]);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(org[i][j] == <span class="string">'H'</span>)</span><br><span class="line">                    cur[i] += <span class="number">1</span>&lt;&lt; (N-j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//***********************************</span></span><br><span class="line">    <span class="comment">//  for(int i=1; i&lt;=top; i++) printf("%d %d\n",state[i],soldier[i]);</span></span><br><span class="line">    <span class="comment">//***********************************</span></span><br><span class="line">        <span class="comment">//初始化第一行，符合地形的所有状态</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= top; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(fit(state[i],<span class="number">1</span>))&#123;</span><br><span class="line">                dp[<span class="number">1</span>][i][<span class="number">0</span>] = soldier[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//初始化第二行</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= top; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(fit(state[i],<span class="number">2</span>))&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= top; j++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(fit(state[j],<span class="number">1</span>))&#123;</span><br><span class="line">                        <span class="keyword">if</span>(!(state[i] &amp; state[j]))&#123;</span><br><span class="line">                            dp[<span class="number">2</span>][i][j] = max(dp[<span class="number">2</span>][i][j],dp[<span class="number">1</span>][j][<span class="number">0</span>]+soldier[i]);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;   </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//状态转移</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= M; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= top; k++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!fit(state[k],i)) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= top; j++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(!fit(state[j],i<span class="number">-1</span>)) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">if</span>(state[k] &amp; state[j]) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> p = <span class="number">1</span>; p &lt;= top; p++)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(!fit(state[p],i<span class="number">-2</span>)) <span class="keyword">continue</span>;</span><br><span class="line">                        <span class="keyword">if</span>(well(state[p],state[k],state[j]))&#123;</span><br><span class="line">                            dp[i][k][j] = max(dp[i][k][j],dp[i<span class="number">-1</span>][j][p]+soldier[i]);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= top; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= top; j++)&#123;</span><br><span class="line">                ans = max(ans,dp[M][i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://poj.org/problem?id=3254&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;poj 3254 &lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;题意如下：农夫有一块地，被划分为m行n列大小相等的格子，其中一
      
    
    </summary>
    
      <category term="刷题" scheme="http://snaill123.com/categories/%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>去重复的全排列</title>
    <link href="http://snaill123.com/2018/02/03/%E5%8E%BB%E9%87%8D%E5%A4%8D%E7%9A%84%E5%85%A8%E6%8E%92%E5%88%97/"/>
    <id>http://snaill123.com/2018/02/03/去重复的全排列/</id>
    <published>2018-02-03T12:09:13.000Z</published>
    <updated>2018-03-01T15:13:33.143Z</updated>
    
    <content type="html"><![CDATA[<h2 id="去重复的全排列"><a href="#去重复的全排列" class="headerlink" title="去重复的全排列"></a>去重复的全排列</h2><blockquote><p>相信大家都知道什么是全排列，但是今天的全排列比你想象中的难一点。我们要找的是全排列中，排列结果互不相同的个数。比如：aab 的全排列就只有三种，那就是aab,baa,aba</p></blockquote><p><strong>先想一下简化的问题吧，假如输入的字符串不重复，例如abcd，那么就是简单的dfs了，一个for循环加一个vis判断，如果判断可以，继续递归。<br>当有重复的字符时候就比较麻烦了，比如aab，单纯的用递归会输出重复的。那么怎么加上限定条件呢。<br>这里，我们让重复的这些字符只顺序输出一遍，这样就不会重复<br>这是什么意思呢，比如说aabc,我们只允许第一个a访问后再访问第二个a，不允许访问第二个，再第一个。<br>再如，abacda，那三个a只能按顺序访问。<br>原理是什么呢，用了点高中学的排列组合的知识，先排重复的，例如我们搞abacda这个例子, 先排三个a, 就是 aaa,那么剩下的就相当于直接插入到aaa中，那么如果我们aaa如果按多种顺序排，就会产生多种结果，所以只能按顺序访问。</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e3</span>;</span><br><span class="line"><span class="keyword">char</span> str[N], buf[N];<span class="comment">//buffer</span></span><br><span class="line"><span class="keyword">int</span> vis[N], total, len;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">arrange</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (num == len)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, buf);</span><br><span class="line">        total++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!vis[i]) &#123;</span><br><span class="line">            <span class="keyword">int</span> j;</span><br><span class="line">            <span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; len; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (str[i] == str[j] &amp;&amp; vis[j]) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (j == len) &#123;</span><br><span class="line">                vis[i] = <span class="number">1</span>;</span><br><span class="line">                buf[num] = str[i];</span><br><span class="line">                arrange(num + <span class="number">1</span>);</span><br><span class="line">                vis[i] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%s"</span>,str)) &#123;</span><br><span class="line">        len = <span class="built_in">strlen</span>(str);</span><br><span class="line">        sort(str, str + len);</span><br><span class="line">        total = <span class="number">0</span>;</span><br><span class="line">        buf[len] = <span class="string">'\0'</span>;</span><br><span class="line">        arrange(<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Total %d\n"</span>, total);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;去重复的全排列&quot;&gt;&lt;a href=&quot;#去重复的全排列&quot; class=&quot;headerlink&quot; title=&quot;去重复的全排列&quot;&gt;&lt;/a&gt;去重复的全排列&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;相信大家都知道什么是全排列，但是今天的全排列比你想象中的难一点。我们要找的
      
    
    </summary>
    
      <category term="刷题" scheme="http://snaill123.com/categories/%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>放张图</title>
    <link href="http://snaill123.com/2018/02/03/%E6%94%BE%E5%BC%A0%E5%9B%BE/"/>
    <id>http://snaill123.com/2018/02/03/放张图/</id>
    <published>2018-02-03T03:54:20.000Z</published>
    <updated>2018-03-01T15:13:45.598Z</updated>
    
    <content type="html"><![CDATA[<h2 id="每天都要元气满满"><a href="#每天都要元气满满" class="headerlink" title="每天都要元气满满!!!"></a>每天都要元气满满!!!</h2><img src="/2018/02/03/放张图/cute.jpg" title="这是小可爱的图片"><h3 id="so-cute"><a href="#so-cute" class="headerlink" title="so cute"></a>so cute</h3><img src="/2018/02/03/放张图/timg.jpg" title="这是小可爱的图片">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;每天都要元气满满&quot;&gt;&lt;a href=&quot;#每天都要元气满满&quot; class=&quot;headerlink&quot; title=&quot;每天都要元气满满!!!&quot;&gt;&lt;/a&gt;每天都要元气满满!!!&lt;/h2&gt;&lt;img src=&quot;/2018/02/03/放张图/cute.jpg&quot; title=&quot;
      
    
    </summary>
    
      <category term="刷题" scheme="http://snaill123.com/categories/%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>一道加减乘dfs问题</title>
    <link href="http://snaill123.com/2018/02/03/%E4%B8%80%E9%81%93%E5%8A%A0%E5%87%8F%E4%B9%98dfs%E9%97%AE%E9%A2%98/"/>
    <id>http://snaill123.com/2018/02/03/一道加减乘dfs问题/</id>
    <published>2018-02-03T03:21:38.000Z</published>
    <updated>2018-03-01T15:13:22.620Z</updated>
    
    <content type="html"><![CDATA[<h2 id="计蒜课上一道dfs题目"><a href="#计蒜课上一道dfs题目" class="headerlink" title="计蒜课上一道dfs题目"></a>计蒜课上一道dfs题目</h2><blockquote><p>请对于下面式子进行填空，填入加减乘，使这个表达式成立。<br>1[  ]2[  ]3[  ]4[  ]5[  ]6[  ]7[  ]8[  ]9[  ]10 == 0<br>请输出一共有多少种方案可以使得表达式成立。</p></blockquote><hr><p>难点在于dfs时如何保证*号的优先性，所以对于dfs函数的参数需要技巧。<br>这里使用的是每次停留一下看下一个符号是什么。如果是加号或者是减号就把上一个计算给计算了，如果是乘号就把 b   和当前数相乘。继续保留上一个符号继续往后看<br>将等式转变为0 + 1[  ]2[  ]3[  ]4[  ]5[  ]6[  ]7[  ]8[  ]9[  ]10 == 0，方便设计dfs<br>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">10</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">a_b</span> <span class="params">(<span class="keyword">int</span> a, <span class="keyword">char</span> c, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(c == <span class="string">'+'</span>) <span class="keyword">return</span> a+b;</span><br><span class="line">    <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">char</span> c, <span class="keyword">int</span> b, <span class="keyword">int</span> cnt)</span></span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(cnt == <span class="number">10</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> a_b(a,c,b) == <span class="number">0</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">     res += dfs(a_b(a,c,b),<span class="string">'+'</span>,f[cnt],cnt+<span class="number">1</span>);</span><br><span class="line">     res += dfs(a_b(a,c,b),<span class="string">'-'</span>,f[cnt],cnt+<span class="number">1</span>);</span><br><span class="line">     res += dfs(a,c,b*f[cnt],cnt+<span class="number">1</span>);</span><br><span class="line">     <span class="keyword">return</span> res; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;dfs(<span class="number">0</span>,<span class="string">'+'</span>,<span class="number">1</span>,<span class="number">1</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;计蒜课上一道dfs题目&quot;&gt;&lt;a href=&quot;#计蒜课上一道dfs题目&quot; class=&quot;headerlink&quot; title=&quot;计蒜课上一道dfs题目&quot;&gt;&lt;/a&gt;计蒜课上一道dfs题目&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;请对于下面式子进行填空，填入加减乘，使这个
      
    
    </summary>
    
      <category term="刷题" scheme="http://snaill123.com/categories/%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>状压dp</title>
    <link href="http://snaill123.com/2018/01/28/%E7%8A%B6%E5%8E%8Bdp/"/>
    <id>http://snaill123.com/2018/01/28/状压dp/</id>
    <published>2018-01-28T14:40:03.000Z</published>
    <updated>2018-03-01T15:12:50.731Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一篇-状压dp入门"><a href="#第一篇-状压dp入门" class="headerlink" title="第一篇 状压dp入门"></a>第一篇 状压dp入门</h1><blockquote><p>状态压缩问题一般是指用10进制数来表示二进制下的状态.常用到位运算<br>1.判断一个数字x在二进制下第i位是不是等于1。<br>方法：if ( ( ( 1 &lt;&lt; ( i - 1 ) ) &amp; x ) &gt;0)<br>2.把一个数字x在二进制下的第i位更改成1。<br>方法：x |= ( 1&lt;&lt;(i-1) )</p></blockquote><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><blockquote><p>有一个N<em>M(1&lt;=N&lt;=5,1&lt;=M&lt;=1000)的棋盘，<br>现在有1</em>2和2*1的小木块无数个，<br>要想盖满整个棋盘，会有多少种可行的方法？<br>答案如果大于1,000,000,007<br>mod1,000,000,007即可。</p></blockquote><h3 id="思路：看到N和M范围差别特别大，而且N的范围特别小时（也有可能都很小，在20以内时）"><a href="#思路：看到N和M范围差别特别大，而且N的范围特别小时（也有可能都很小，在20以内时）" class="headerlink" title="思路：看到N和M范围差别特别大，而且N的范围特别小时（也有可能都很小，在20以内时）"></a>思路：看到N和M范围差别特别大，而且N的范围特别小时（也有可能都很小，在20以内时）</h3><h3 id="首先就应该想到正确算法与这两个范围有关！因此进一步可以考虑使用状压dp求解！"><a href="#首先就应该想到正确算法与这两个范围有关！因此进一步可以考虑使用状压dp求解！" class="headerlink" title="首先就应该想到正确算法与这两个范围有关！因此进一步可以考虑使用状压dp求解！"></a>首先就应该想到正确算法与这两个范围有关！因此进一步可以考虑使用状压dp求解！</h3><h3 id="code"><a href="#code" class="headerlink" title="code"></a>code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;    </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;   </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> N, M;   <span class="comment">//n,m分别代表棋盘的长宽</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> dp[<span class="number">1005</span>][<span class="number">34</span>]; <span class="comment">//dp[I][j]用于存储填充i-1列状态为j时，i列可能出现的方法数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j,<span class="keyword">int</span> state,<span class="keyword">int</span> nex)</span> <span class="comment">//这里I代表列数，j代表当前位数(也可以说是行数-1，初始时为0)，state代表状态数，nex代表下一列出现的状态</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (j==N)   </span><br><span class="line">    &#123;</span><br><span class="line">        dp[i+<span class="number">1</span>][nex]+=dp[i][state];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (((<span class="number">1</span>&lt;&lt;j)&amp;state)&gt;<span class="number">0</span>)   </span><br><span class="line">        dfs(i,j+<span class="number">1</span>,state,nex);   <span class="comment">//如果这个位置已经被上一列所占用,直接跳过</span></span><br><span class="line">    <span class="keyword">if</span> (((<span class="number">1</span>&lt;&lt;j)&amp;state)==<span class="number">0</span>)</span><br><span class="line">        dfs(i,j+<span class="number">1</span>,state,nex|(<span class="number">1</span>&lt;&lt;j));       <span class="comment">//如果这个位置是空的，尝试放一个左右覆盖1*2的木板</span></span><br><span class="line">    <span class="keyword">if</span> (j+<span class="number">1</span>&lt;N &amp;&amp; ((<span class="number">1</span>&lt;&lt;j)&amp;state)==<span class="number">0</span> &amp;&amp; ((<span class="number">1</span>&lt;&lt;(j+<span class="number">1</span>))&amp;state)==<span class="number">0</span>)</span><br><span class="line">        dfs(i,j+<span class="number">2</span>,state,nex);   <span class="comment">//如果这个位置以及下一个位置都是空的，尝试放一个上下覆盖2*1的木板，而此时要跳过下一个木块</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span>&gt;&gt;N&gt;&gt;M)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));    </span><br><span class="line">        dp[<span class="number">1</span>][<span class="number">0</span>]=<span class="number">1</span>; <span class="comment">//初始化第一列状态为0的方法数等于1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=M;i++)  <span class="comment">//外层for循环遍历每一列</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;(<span class="number">1</span>&lt;&lt;N);j++)  <span class="comment">//内层for遍历每一个列的所有状态</span></span><br><span class="line">                <span class="keyword">if</span> (dp[i][j])   <span class="comment">//只要dp[i][j]方法数不为空，就执行dfs方法</span></span><br><span class="line">                &#123;</span><br><span class="line">                    dfs(i,<span class="number">0</span>,j,<span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;dp[M+<span class="number">1</span>][<span class="number">0</span>]&lt;&lt;<span class="built_in">endl</span>; <span class="comment">//最后dp[m+1][0]就是结果</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">`</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第一篇-状压dp入门&quot;&gt;&lt;a href=&quot;#第一篇-状压dp入门&quot; class=&quot;headerlink&quot; title=&quot;第一篇 状压dp入门&quot;&gt;&lt;/a&gt;第一篇 状压dp入门&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;状态压缩问题一般是指用10进制数来表示二进制下的状
      
    
    </summary>
    
      <category term="刷题" scheme="http://snaill123.com/categories/%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
</feed>
